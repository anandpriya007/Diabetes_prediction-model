# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JvUZ94TLmrPdurizzr_C302cB4alajgb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv("/content/diabetes_prediction_dataset.csv")

df.head()

df.isnull().sum()

df.describe()

df.info()

df['blood_glucose_level']

c=0
for i in df['blood_glucose_level']:
   if(i<=120):
    c+=1
print("There are ",c,"with sugar level below 120")

c=0
for i in df['blood_glucose_level']:
   if(i>=120):
    c+=1
print("There are ",c,"with sugar level above 120")

for i in df['blood_glucose_level'].unique():
    print(i)

for column in df.columns:
    plt.figure(figsize=(8, 5))
    sns.histplot(df[column], bins=30, kde=True)
    plt.title(f'Distribution of {column}')
    plt.show()

from sklearn.preprocessing import LabelEncoder


label_encoder = LabelEncoder()


df['smoking_history_encoded'] = label_encoder.fit_transform(df['smoking_history'])


label_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))
print("Label Mapping:", label_mapping)


print(df[['smoking_history', 'smoking_history_encoded']])

label_encoder = LabelEncoder()


df['gender_encoded'] = label_encoder.fit_transform(df['gender'])


label_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))
print("Label Mapping:", label_mapping)


print(df[['gender', 'gender_encoded']])

print(df['diabetes'])

df['diabetes'].unique()

columns_drop = ['gender', 'smoking_history']


df.drop(columns=columns_drop, inplace=True)

df

X = df.drop('diabetes', axis=1)
y = df['diabetes']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

from sklearn.feature_selection import SelectKBest, chi2
k_best = 5
selector = SelectKBest(chi2, k=k_best)
X_train_selected = selector.fit_transform(X_train, y_train)
X_test_selected = selector.transform(X_test)
selected_indices = selector.get_support(indices=True)
selected_features = X_train.columns[selected_indices]

print(selected_features)

from sklearn.tree import DecisionTreeClassifier
dtr=DecisionTreeClassifier(random_state=42)
dtr.fit(X_train_selected,y_train)

y_pred=dtr.predict(X_test_selected)

from sklearn.metrics import accuracy_score

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

